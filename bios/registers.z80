REGS = 20a4h

registers:
	; save registers
	push	af
	push	bc
	push	de
	push	hl

	;
	; read registers
	;

	ld	(REGS), bc		; BC
	ld	(REGS+2), de		; DE
	ld	(REGS+4), hl		; HL

	ex	af, af'			; save AF

	call	.put_sp_in_hl
	ld	(REGS+6), hl		; SP

	ex	af, af'			; restore AF
	push	af
	pop	hl			; AF
	ld	(REGS+8), hl
	
	push	ix			; IX
	pop	hl
	ld	(REGS+10), hl
	
	push	iy			; IY
	pop	hl
	ld	(REGS+12), hl
	
	; get PC
	call	.put_sp_in_hl
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ex	de, hl
	dec	hl			; -1 from the rst call
	ld	(REGS+14), hl

	;
	; print registers
	;

	call	print_enter

	ld	hl, .a			; A
	call	SYS_PRINT
	ld	a, 2
	ld	de, (REGS+9)
	call	SYS_PRINTHEX

	ld	de, .bc			; BC
	ld	hl, 0
	call	.print_reg

	ld	de, .de			; DE
	ld	hl, 4
	call	.print_reg

	ld	de, .hl			; HL
	ld	hl, 4
	call	.print_reg

	ld	de, .ix			; IX
	ld	hl, 10
	call	.print_reg

	ld	de, .iy			; IY
	ld	hl, 12
	call	.print_reg

	ld	de, .pc			; PC
	ld	hl, 14
	call	.print_reg

	ld	de, .sp			; SP
	ld	hl, 6
	call	.print_reg


	; 
	; print flags
	;

	ld	hl, .flags
	call	SYS_PRINT

	ld	a, (REGS+8)		; A = F
	ld	b, a

	bit	0, b
	jr	z, .skip1
	ld	a, 'C'
	call	SYS_PUTC
.skip1:
	bit	1, b
	jr	z, .skip2
	ld	a, 'N'
	call	SYS_PUTC
.skip2:
	bit	2, b
	jr	z, .skip3
	ld	a, 'P'
	call	SYS_PUTC
.skip3:
	bit	4, b
	jr	z, .skip4
	ld	a, 'H'
	call	SYS_PUTC
.skip4:
	bit	6, b
	jr	z, .skip5
	ld	a, 'Z'
	call	SYS_PUTC
.skip5:
	bit	7, b
	jr	z, .skip6
	ld	a, 'S'
	call	SYS_PUTC
.skip6:

	call	print_enter

	; restore registers
	pop	hl
	pop	de
	pop	bc
	pop	af
	ret

.print_reg:			; print text in DE and register in REGS + HL
	ex	de, hl
	call	SYS_PRINT
	ld	hl, REGS + 1
	add	hl, de
	ld	e, (hl)
	ld	a, 2
	call	SYS_PRINTHEX
	dec	hl
	ld	e, (hl)
	ld	a, 2
	call	SYS_PRINTHEX
	ret

.put_sp_in_hl:
	ld	hl, 0
	add	hl, sp
	ld	b, 0
	ld	c, 12
	add	hl, bc
	ret

	;
	; strings
	;
.a:	asciiz	"a:"
.bc:	asciiz	" bc:"
.de:	asciiz	" de:"
.hl:	asciiz	" hl:"
.ix:	asciiz	" ix:"
.iy:	asciiz	" iy:"
.pc:	asciiz	" pc:"
.sp:	asciiz	" sp:"
.flags: asciiz  " flags:"

; vim:ts=8:sw=8:sts=8:noexpandtab
