UART_INPUT_MSK	= 01b
UART_OUTPUT_MSK = 10b

	;===========================================
	;
	; SYS_PUTC - Print character in A to serial
	;
	;===========================================
sys_putc:
	push	af			; save A
.reg_not_empty
	in	a, (IO_UART_CONFIG)	; is the transmit register free?
	and	UART_OUTPUT_MSK
	jr	z, .reg_not_empty	;	if not, try again
	
	pop	af			; restore A
	
	out	(IO_UART), a		; print char
	ret

	;===========================================
	; 
	; SYS_GETC - Read serial and place result in A (0 if empty)
	;
	;===========================================
sys_getc:
	in	a, (IO_UART_CONFIG)	; is a new char available?
	and	UART_INPUT_MSK
	jr	nz, .cont		;	if yes, continure

	ld	a, 0			;	if not, return 0
	ret
.cont:
	in	a, (IO_UART)		; read char
	ret

	;===========================================
	; 
	; SYS_GETCW - Wait for a character in serial input, and place it on A
	;
	;===========================================
sys_getcw:
	in	a, (IO_UART_CONFIG)	; is a new char available?
	and	UART_INPUT_MSK
	jr	z, sys_getcw		;	if not, try again
	
	in	a, (IO_UART)		; read char
	ret

	;===========================================
	; 
	; Print null-terminated string in HL
	;   - trashes A, HL
	;
	;===========================================
sys_print:
	ld	a, (hl)			; load next char
	cp	a, 0			; if null, return
	ret	z

	call	sys_putc		; print char
	inc	hl			; increment buffer pointer, and go to next
	jr	sys_print

	;===========================================
	;
	; SYS_INPUT - Input string from the user
	;   A - max string size (trashes)
	;   HL - buffer location in memory
	;
	;===========================================
sys_input:
	push	bc			; save registers
	push	hl
	ld	b, 0			; current char count

.next_char:
	call	sys_getcw

.check_for_backspace:
	cp	127			; was BACKSPACE pressed?
	jr	nz, .check_for_enter

	ld	a, b
	cp	0			; if on beginning of string...
	jr	z, .next_char		;   don't do anything

	push	hl			; print backspace
	ld	hl, .backspace
	call	sys_print
	pop	hl

	dec	hl			; remove char from string
	dec	b
	jr	.next_char

.check_for_enter:
	cp	13			; was ENTER pressed?
	jr	nz, .add_char

	call	.print_enter		; if so, - print enter
	ld	(hl), 0			;        - add null pointer
	pop	hl			;        - restore registers
	pop	bc
	ret				;        - return

.add_char:
	call	sys_putc		; add character
	ld	(hl), a
	inc	hl
	inc	b
	jr	.next_char

.print_enter:
	ld	a, 13
	call	sys_putc
	ld	a, 10
	call	sys_putc
	ret

.backspace:
	asciiz	8, ' ', 8

	;===========================================
	;
	; SYS_PRINTHEX - Print hex in register DE
	;   A - number of digits (2 or 4)
	;
	;===========================================
sys_printhex:
	cp	2			; if A = 2, skip the first (higher) byte
	jr	z, .skip_higher_byte

	push	de			; otherwise, print the first (higher) byte
	ld	e, d
	call	.print_register_e
	pop	de
.skip_higher_byte:
	call	.print_register_e	; print the second (lower byte)
	ret				; return

.print_register_e:
	ld	a, e			; print higher nibble (print (E >> 4))
	rrca
	rrca
	rrca
	rrca
	call	.print_nibble_in_a
	ld	a, e			; print lower nibble (print (E & 0xf))
	call	.print_nibble_in_a
	ret

.print_nibble_in_a:
	and	0xf			; get only lower nibble
	cp	0ah			; if A >= 0xA, print letter...
	jr	c, .print_nibble_number

	add	'A' - 0ah
	call	sys_putc
	ret

.print_nibble_number:			; ...else, print number
	add	'0'
	call	sys_putc
	ret

; vim:ts=8:sw=8:sts=8:noexpandtab
